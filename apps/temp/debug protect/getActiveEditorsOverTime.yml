id: getActiveEditorsOverTime
type: datasource
subtype: SqlQuery
resourceName: segment-bigquery
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - servedFromCache: false
    - successMessage: ''
    - queryDisabled: 'true'
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: |-
        with individual_builder as (
        SELECT distinct
          cast(created_at as date) DATE,
          u.sfdc_account_id,
          count_editors_active_7_days_current,
          count_editors_active_30_days_current
        FROM
          success_analytics.fct_account_usage_scores u
          LEFT JOIN analytics.dim_sfdc_accounts a ON u.sfdc_account_id = a.id
        WHERE
          created_at >= {{dateRange1.value.start}}
          AND created_at < {{dateRange1.value.end}}
          AND a.account_status_committed__c  = 'Active Customer' --Filters out uncommitted accounts
          and a.customer_tier__c = 'Scale'
          and u.stage IN UNNEST({{multiselect1.value}})
        )

        select 
          DATE, 
          SUM(count_editors_active_7_days_current) AS active_editors_7_days,
          SUM(count_editors_active_30_days_current) AS active_editors_30_days
        from individual_builder
        GROUP BY
          1
        ORDER BY
          date asc;
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: '86400'
    - databaseHostOverride: ''
    - metadata: null
    - queryRunTime: null
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: true
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-05-18T06:54:42.588Z
folder: graphs
